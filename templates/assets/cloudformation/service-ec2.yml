---
AWSTemplateFormatVersion: '2010-09-09'
Description: MU service in a specific environment containing an ALB target group with EC2 AutoScaling group
Parameters:
  Namespace:
    Type: String
    Description: Namespace for stack prefixes
  EnvironmentName:
    Type: String
    Description: Name of environment used for resource namespace
  EC2InstanceProfileArn:
    Type: String
    Description: ARN of instance profile for EC2 instance to assume
  CodeDeployRoleArn:
    Type: String
    Description: ARN of IAM role for CodeDeploy to assume
  ServiceName:
    Type: String
    Description: Name of service
  AppName:
    Type: String
    Description: Name of app in CodeDeploy
  RevisionBucket:
    Type: String
    Description: Name of bucket for application revision
  RevisionKey:
    Type: String
    Description: Name of object key for application revision
  RevisionBundleType:
    Type: String
    Description: Type of bundle
    Default: 'zip'
  ServicePort:
    Type: String
    Description: Port exposed in service
    Default: '8080'
  ServiceProtocol:
    Type: String
    Description: Protocol for port exposed in service
    Default: 'HTTP'
    AllowedValues:
    - HTTP
    - HTTPS
  ServiceHealthEndpoint:
    Type: String
    Description: Endpoint to test service health
    Default: '/health'
  ServiceDesiredCount:
    Type: Number
    Default: '2'
    Description: Number of instances for ASG
  PathPattern:
    Type: CommaDelimitedList
    Description: List of paths to route to the service.
    Default: ''
  PathListenerRulePriority:
    Type: Number
    Description: The priority of the path rule being added to the listener
    Default: '1'
  HostPattern:
    Type: CommaDelimitedList
    Description: List of hosts to route to the service.
    Default: ''
  HostListenerRulePriority:
    Type: Number
    Description: The priority of the host rule being added to the listener
    Default: '2'
  VpcId:
    Type: String
    Description: Name of the value to import for the VpcId
  InstanceType:
    Type: String
    Description: Instance type to use.
    Default: t3.micro
  ServiceMinSize:
    Type: Number
    Default: '1'
    Description: Minimum number of instances that can be launched
  ServiceMaxSize:
    Type: Number
    Default: '2'
    Description: Maximum number of instances that can be launched
  KeyName:
    Type: String
    Description: KeyName to associate with worker instances.  Leave blank to disable SSH access.
    Default: ''
  SshAllow:
    Description: Subnet from which to allow SSH access.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: 'must be a valid CIDR block: x.x.x.x/x.'
  ImageId:
    Description: EC2 AMI to launch
    Type: String
    Default: ''
  ImageOsType:
    Description: OS Type for ECS AMI
    Type: String
    Default: 'amazon'
    AllowedValues:
    - 'amazon'
    - 'centos7'
    - 'windows'
  InstanceSubnetIds:
    Type: String
    Description: Name of the value to import for the ecs subnet ids
  InstanceSecurityGroup:
    Type: String
    Description: Name of the security group to associate with instances
  HttpProxy:
    Type: String
    Description: Proxy to use from ECS cluster instances (host:port)
    Default: ''
  ElbSecurityGroup:
    Type: String
    Description: The security group to add to the ECS instance for ELB access
  ElbHttpListenerArn:
    Type: String
    Description: Name of the value to import for the Arn of the ELB listener to attach the target group to.
  ElbHttpsListenerArn:
    Type: String
    Description: Name of the value to import for the Arn of the ELB listener to attach the target group to.
    Default: ''
  DatabaseName:
    Type: String
    Description: Name of database
    Default: ""
  DatabaseMasterUsername:
    Type: String
    Description: Username of database
    Default: ""
  DatabaseMasterPassword:
    Type: String
    NoEcho: true
    Description: Password of database
    Default: ""
  DatabaseEndpointAddress:
    Type: String
    Description: Endpoint address of database
    Default: ""
  DatabaseEndpointPort:
    Type: String
    Description: Endpoint port of database
    Default: ""
  TargetCPUUtilization:
    Type: String
    Description: Target CPU Utilization for Tracking Policy on ASG
    Default: '75'
Conditions:
  HasProxy:
    "Fn::Not":
      - "Fn::Equals":
        - !Ref HttpProxy
        - ''
  HasPathPattern:
    "Fn::Not":
      - "Fn::Equals":
        - "Fn::Join":
          - ''
          - !Ref PathPattern
        - ''
  HasHostPattern:
    "Fn::Not":
      - "Fn::Equals":
        - "Fn::Join":
          - ''
          - !Ref HostPattern
        - ''
  HasTargetGroup:
    "Fn::Or":
    - !Condition HasPathPattern
    - !Condition HasHostPattern
  HasElbHttpPathListener:
    "Fn::And":
    - "Fn::Not":
       - "Fn::Equals":
         - !Sub ${ElbHttpListenerArn}
         - ''
    - !Condition HasPathPattern
  HasElbHttpsPathListener:
    "Fn::And":
    - "Fn::Not":
       - "Fn::Equals":
         - !Sub ${ElbHttpsListenerArn}
         - ''
    - !Condition HasPathPattern
  HasElbHttpHostListener:
    "Fn::And":
    - "Fn::Not":
       - "Fn::Equals":
         - !Sub ${ElbHttpListenerArn}
         - ''
    - !Condition HasHostPattern
  HasElbHttpsHostListener:
    "Fn::And":
    - "Fn::Not":
       - "Fn::Equals":
         - !Sub ${ElbHttpsListenerArn}
         - ''
    - !Condition HasHostPattern
  HasKeyName:
    "Fn::Not":
      - "Fn::Equals":
        - !Ref KeyName
        - ''
Resources:
  ServiceAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
    - ServiceLogGroup
    Properties:
      VPCZoneIdentifier:
        Fn::Split:
        - ","
        - Fn::ImportValue: !Sub ${InstanceSubnetIds}
      LaunchConfigurationName: !Ref ServiceInstances
      HealthCheckType: 
        Fn::If:
          - HasTargetGroup
          - ELB
          - EC2
      HealthCheckGracePeriod: 600
      TargetGroupARNs:
        - Fn::If:
          - HasTargetGroup
          - !Ref ElbTargetGroup
          - !Ref AWS::NoValue
      MinSize: !Ref ServiceMinSize
      MaxSize: !Ref ServiceMaxSize
      DesiredCapacity: !Ref ServiceDesiredCount
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
        PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'
  CPUUtilizationPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ServiceAutoScalingGroup
      Cooldown: 300
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: !Ref TargetCPUUtilization
  InventoryAssociation:
    Type: AWS::SSM::Association
    Properties:
      AssociationName: 'Inventory-Association'
      Name: 'AWS-GatherSoftwareInventory'
      ScheduleExpression: 'rate(1 day)'
      Parameters:
        applications: 
        - Enabled
        awsComponents:
        - Enabled
        customInventory:
        - Enabled
        instanceDetailedInformation:
        - Enabled
        networkConfig:
        - Enabled
        services:
        - Enabled
        windowsRoles:
        - Enabled
        windowsUpdates:
        - Enabled
      Targets:
      - Key: tag:aws:autoscaling:groupName	
        Values: [!Ref ServiceAutoScalingGroup]
  ServiceInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          amazon:
            - commonLinux
            - amazonLinux
          centos7:
            - commonLinux
            - centos7Linux
        amazonLinux:
          packages:
            yum:
              awslogs: []
              aws-cli: []
          files:
            "/etc/awslogs/awscli.conf":
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}
          services:
            sysvinit:
              codedeploy-agent:
                enabled: 'true'
                ensureRunning: 'true'
              awslogs:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - "/etc/awslogs/awslogs.conf"
                - "/etc/awslogs/etc/proxy.conf"
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - "/etc/cfn/cfn-hup.conf"
                - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
        centos7Linux:
          commands:
            awscli-install:
              command: pip install --upgrade awscli
            awslogs-install:
              command: curl https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py -O && python ./awslogs-agent-setup.py --region ${AWS::Region} --non-interactive --configfile=/etc/awslogs/awslogs.conf
        commonLinux:
          packages:
            yum:
              ruby: []
          files:
            "/etc/environment":
              content: !Sub |
              {{with .Environment}}
              {{range $key, $val := .}}
                {{$key}}={{$val}}
              {{end}}
              {{end}}
            "/tmp/codedeploy-install":
              source: !Sub https://aws-codedeploy-${AWS::Region}.s3.amazonaws.com/latest/install
              mode: '000755'
              owner: root
              group: root
            "/etc/codedeploy-agent/conf/codedeployagent.yml":
              content: !Sub |
                ---
                :log_aws_wire: false
                :log_dir: '/var/log/aws/codedeploy-agent/'
                :pid_dir: '/opt/codedeploy-agent/state/.pid/'
                :program_name: codedeploy-agent
                :root_dir: '/opt/codedeploy-agent/deployment-root'
                :verbose: false
                :wait_between_runs: 1
                :max_revisions: 5
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ServiceInstances.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ServiceInstances --configsets ${ImageOsType} --region ${AWS::Region}
                runas=root
            "/etc/awslogs/etc/proxy.conf":
              content: !Sub |
                HTTP_PROXY=http://${HttpProxy}/
                HTTPS_PROXY=http://${HttpProxy}/
            "/etc/profile.d/proxy.sh":
              content: !Sub |
                http_proxy=http://${HttpProxy}/
                https_proxy=http://${HttpProxy}/
                no_proxy=169.254.169.254
              mode: '000755'
              owner: root
              group: root
            "/etc/awslogs/awscli.conf":
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}
            "/etc/awslogs/awslogs.conf":
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state

                [dmesg]
                file = /var/log/dmesg
                log_group_name = ${AWS::StackName}
                log_stream_name = instance/dmesg/{instance_id}

                [messages]
                file = /var/log/messages
                log_group_name = ${AWS::StackName}
                log_stream_name = instance/messages/{instance_id}
                datetime_format = %b %d %H:%M:%S

                [cloud-init]
                file = /var/log/cloud-init*
                log_group_name = ${AWS::StackName}
                log_stream_name = instance/cloud-init/{instance_id}
                datetime_format = %Y-%m-%dT%H:%M:%SZ

                [cfn-init]
                file = /var/log/cfn-init*
                log_group_name = ${AWS::StackName}
                log_stream_name = instance/cfn-init/{instance_id}
                datetime_format = %Y-%m-%d %H:%M:%S

                [codedeploy-agent-logs]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/aws/codedeploy-agent/codedeploy-agent.log
                log_stream_name = instance/codedeploy-agent/{instance_id}
                log_group_name = ${AWS::StackName}

                [codedeploy-updater-logs]
                file = /tmp/codedeploy-agent.update.log
                log_stream_name = instance/codedeploy-updater/{instance_id}
                log_group_name = ${AWS::StackName}

                [codedeploy-deployment-logs]
                file = /opt/codedeploy-agent/deployment-root/deployment-logs/codedeploy-agent-deployments.log
                log_stream_name = instance/codedeploy-deployments/{instance_id}
                log_group_name = ${AWS::StackName}

                [ssm]
                file = /var/log/amazon/ssm/*
                log_group_name = ${AWS::StackName}
                log_stream_name = instance/ssm/{instance_id}
                datetime_format = %Y-%m-%d %H:%M:%S
          commands:
            codedeploy-install:
              command:
                Fn::If:
                - HasProxy
                - Fn::Sub: ./codedeploy-install auto --proxy http://${HttpProxy}
                - ./codedeploy-install auto
              cwd: "/tmp"
    Properties:
      ImageId: !Ref ImageId
      SecurityGroups:
      - !Ref InstanceSecurityGroup
      - !Ref ElbSecurityGroup
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref EC2InstanceProfileArn
      KeyName:
        Fn::If:
          - HasKeyName
          - !Ref KeyName
          - !Ref "AWS::NoValue"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe

          CFN_PROXY_ARGS=""
          if [[ ! -z "${HttpProxy}" ]]; then
            echo "Configuring HTTP_PROXY=${HttpProxy}"

            # Set Yum HTTP proxy
            if [ ! -f /var/lib/cloud/instance/sem/config_yum_http_proxy ]; then
              echo "proxy=http://${HttpProxy}" >> /etc/yum.conf
              echo "$$: $(date +%s.%N | cut -b1-13)" > /var/lib/cloud/instance/sem/config_yum_http_proxy
            fi

            CFN_PROXY_ARGS="--http-proxy http://${HttpProxy} --https-proxy http://${HttpProxy}"
          fi

          yum -y update

          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ServiceInstances --configsets ${ImageOsType} --region ${AWS::Region} $CFN_PROXY_ARGS
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ServiceAutoScalingGroup --region ${AWS::Region} $CFN_PROXY_ARGS
  DeployGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    DeletionPolicy: Retain
    Properties:
      ApplicationName: !Ref AppName
      Deployment:
        IgnoreApplicationStopFailures: true
        Revision:
          RevisionType: S3
          S3Location:
            Bucket: !Ref RevisionBucket
            Key: !Ref RevisionKey
            BundleType: !Ref RevisionBundleType
      AutoScalingGroups:
      - !Ref ServiceAutoScalingGroup
      ServiceRoleArn: !Ref CodeDeployRoleArn
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
  ServiceLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Ref AWS::StackName
  ElbHttpPathListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: HasElbHttpPathListener
    Properties:
      Actions:
        - Fn::If:
            - HasElbHttpsPathListener
            - Type: redirect
              RedirectConfig:
                Port: "443"
                Protocol: HTTPS
                StatusCode: HTTP_301
            - Type: forward
              TargetGroupArn: !Ref ElbTargetGroup
      Conditions:
      - Field: path-pattern
        Values: !Ref PathPattern
      ListenerArn:
        Fn::ImportValue: !Sub ${ElbHttpListenerArn}
      Priority: !Ref PathListenerRulePriority
  ElbHttpsPathListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: HasElbHttpsHostListener
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref ElbTargetGroup
      Conditions:
      - Field: path-pattern
        Values: !Ref PathPattern
      ListenerArn:
        Fn::ImportValue: !Sub ${ElbHttpsListenerArn}
      Priority: !Ref PathListenerRulePriority
  ElbHttpHostListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: HasElbHttpHostListener
    Properties:
      Actions:
        - Fn::If:
            - HasElbHttpsHostListener
            - Type: redirect
              RedirectConfig:
                Port: "443"
                Protocol: HTTPS
                StatusCode: HTTP_301
            - Type: forward
              TargetGroupArn: !Ref ElbTargetGroup
      Conditions:
      - Field: host-header
        Values: !Ref HostPattern
      ListenerArn:
        Fn::ImportValue: !Sub ${ElbHttpListenerArn}
      Priority: !Ref HostListenerRulePriority
  ElbHttpsHostListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: HasElbHttpsHostListener
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref ElbTargetGroup
      Conditions:
      - Field: host-header
        Values: !Ref HostPattern
      ListenerArn:
        Fn::ImportValue: !Sub ${ElbHttpsListenerArn}
      Priority: !Ref HostListenerRulePriority
  ElbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: HasTargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: !Ref ServiceHealthEndpoint
      HealthCheckProtocol: !Ref ServiceProtocol
      HealthCheckTimeoutSeconds: 3
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-299
      Port: !Ref ServicePort
      Protocol: !Ref ServiceProtocol
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 60
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue: !Sub ${VpcId}

