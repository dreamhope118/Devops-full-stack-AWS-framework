apiVersion: v1
kind: Namespace
metadata:
  name: {{ .Namespace }}
  annotations:
    mu/type: service
    mu/service: {{ .ServiceName }}
    mu/revision: {{ .Revision }}
    mu/version: {{ .MuVersion }}

---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ .ServiceName }}-deployment
  namespace: {{ .Namespace }}
  annotations:
    mu/type: service
    mu/service: {{ .ServiceName }}
    mu/revision: {{ .Revision }}
    mu/version: {{ .MuVersion }}
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .ServiceName }}-deployment
      app.kubernetes.io/part-of: {{ .ServiceName }}
  {{ if eq .DeploymentStrategy "replace" }} # see common/types.go DeploymentStrategy types for valid string values
  strategy:
    type: Recreate
  {{ else }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: {{ .MaxUnavailable }}%
      maxSurge: {{ .MaxSurge }}%
  {{ end }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .ServiceName }}-deployment
        app.kubernetes.io/part-of: {{ .ServiceName }}
    annotations:
      mu/type: service
      mu/service: {{ .ServiceName }}
      mu/revision: {{ .Revision }}
      mu/version: {{ .MuVersion }}
    spec:
      containers:
      - name: {{ .ServiceName }}
        image: {{ .ImageUrl }}
        env:
        {{if .DatabaseSecretName}}
        - name: DatabaseEndpointAddress
          valueFrom:
            secretKeyRef:
              name: {{.DatabaseSecretName}}
              key: address
        - name: DatabaseEndpointPort
          valueFrom:
            secretKeyRef:
              name: {{.DatabaseSecretName}}
              key: port
        - name: DatabaseMasterUsername
          valueFrom:
            secretKeyRef:
              name: {{.DatabaseSecretName}}
              key: username
        - name: DatabaseMasterPassword
          valueFrom:
            secretKeyRef:
              name: {{.DatabaseSecretName}}
              key: password
        {{end}}
        {{range $name, $value := .EnvVariables}}
        - name: {{$name}}
          value: {{$value}}
        {{end}}
        - name: _SERVICE_DISCOVERY_NAME
          value: {{ .Namespace }}.svc.cluster.local
        ports:
        - containerPort: {{ .ServicePort }}
        readinessProbe:
          httpGet:
            port: {{ .ServicePort }}
            path: {{ .ServiceHealthEndpoint }}
            scheme: {{ .ServiceHealthProto }}
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 3
        livenessProbe:
          httpGet:
            port: {{ .ServicePort }}
            path: {{ .ServiceHealthEndpoint }}
            scheme: {{ .ServiceHealthProto }}
          initialDelaySeconds: 15
          periodSeconds: 30
          timeoutSeconds: 3
          successThreadhold: 2
          failureThreshold: 5
---

kind: Service
apiVersion: v1
metadata:
  namespace: {{ .Namespace }}
  name: {{ .ServiceName }}
  labels:
    app.kubernetes.io/name: {{ .ServiceName }}
    app.kubernetes.io/part-of: {{ .ServiceName }}
  annotations:
    mu/type: service
    mu/service: {{ .ServiceName }}
    mu/revision: {{ .Revision }}
    mu/version: {{ .MuVersion }}
spec:
  selector:
    app.kubernetes.io/name: {{ .ServiceName }}-deployment
    app.kubernetes.io/part-of: {{ .ServiceName }}
  ports:
  - name: {{ .ServiceProto }}
    port: {{ .ServicePort }}
    targetPort: {{ .ServicePort }}

{{if or .HostPatterns .PathPatterns}}
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    mu/type: service
    mu/service: {{ .ServiceName }}
    mu/revision: {{ .Revision }}
    mu/version: {{ .MuVersion }}
  name: {{ .ServiceName }}-ingress
  namespace: {{ .Namespace }}
spec:
  rules:
  {{range .HostPatterns}}
  - host: "{{.}}"
    http:
      paths:
      - backend:
          serviceName: {{ $.ServiceName}}
          servicePort: {{ $.ServicePort }}
        path: /
  {{end}}
  {{range .PathPatterns}}
  - http:
      paths:
      - backend:
          serviceName: {{ $.ServiceName}}
          servicePort: {{ $.ServicePort }}
        path: "{{.}}"
  {{end}}
{{end}}
